<?xml version="1.0" encoding="utf-8" ?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:msxsl="urn:schemas-microsoft-com:xslt"
	xmlns:bam="http://schemas.microsoft.com/BizTalkServer/2004/10/BAM"
	xmlns:script="http://GeneratedTypedBAMDefinitions/Script">
  <xsl:output method="text" encoding="utf-8" omit-xml-declaration="yes"/>
  <xsl:param name="EventStreamType"/>
  <xsl:param name="TargetNamespace"/>
  <xsl:param name="ToolVersion"/>
  <msxsl:script language="C#" implements-prefix="script">
    <![CDATA[
    public string ResolveCLRType(string BAMDataType)
    {

	    string CLRTypeName = null;
	    switch (BAMDataType)
	    {
		    case "NVARCHAR":
			    CLRTypeName = "string";
			    break;

		    case "DATETIME":
			    CLRTypeName = "DateTime";
			    break;

		    case "FLOAT":
			    CLRTypeName = "decimal"; 
			    break;

		    case "INT":
			    CLRTypeName = "int";
			    break;
	    }

	    return CLRTypeName;
    }
    ]]>
  </msxsl:script>
  <xsl:template match="bam:BAMDefinition">//
// Generated by BizTalk BAM API Generator <xsl:value-of select="$ToolVersion"/> [https://github.com/tfabraham/BizTalkTypedBAMAPIGenerator]
<xsl:if test="$EventStreamType = 'Orchestration'">// This code requires a project reference to Microsoft.BizTalk.Bam.XLANGs.dll.</xsl:if>
<xsl:if test="$EventStreamType != 'Orchestration'">// This code requires a project reference to Microsoft.BizTalk.Bam.EventObservation.dll.</xsl:if>
//

using System;
using System.Collections.Generic;
using Microsoft.BizTalk.Bam.EventObservation;

namespace <xsl:value-of select="$TargetNamespace"/>
{
    public static class <xsl:value-of select="$EventStreamType"/>ESApi
    {
        <xsl:if test="$EventStreamType = 'Direct'">
        /// &lt;summary&gt;
        /// Creates a new EventStream instance with a default connection string.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;EventStream object&lt;/returns&gt;
        [Obsolete]
        public static <xsl:value-of select="$EventStreamType"/>EventStream GetEventStream()
        {
            return new <xsl:value-of select="$EventStreamType"/>EventStream("Integrated Security=SSPI;Data Source=.;Initial Catalog=BAMPrimaryImport", 1);
        }
        </xsl:if>
        <xsl:if test="$EventStreamType = 'Buffered'">
        /// &lt;summary&gt;
        /// Creates a new EventStream instance with a default connection string.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;EventStream object&lt;/returns&gt;
        [Obsolete]
        public static <xsl:value-of select="$EventStreamType"/>EventStream GetEventStream()
        {
            return new <xsl:value-of select="$EventStreamType"/>EventStream("Integrated Security=SSPI;Data Source=.;Initial Catalog=BizTalkMsgBoxDb", 1);
        }
        </xsl:if>

        <xsl:if test="$EventStreamType = 'Direct' or $EventStreamType = 'Buffered'">
        /// &lt;summary&gt;
        /// Creates a new EventStream instance.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;EventStream object&lt;/returns&gt;
        public static <xsl:value-of select="$EventStreamType"/>EventStream GetNewEventStream(string connectionString)
        {
            return new <xsl:value-of select="$EventStreamType"/>EventStream(connectionString, 1);
        }
        </xsl:if>

        public struct Activities
        {<xsl:for-each select="bam:Activity" xml:space="default">
            <xsl:variable name="CompressedDisplayName" select="translate(@Name, ' ', '')"/>
            public const string <xsl:value-of select="$CompressedDisplayName"/> = "<xsl:value-of select="@Name"/>";</xsl:for-each>
        }

        <xsl:apply-templates select="bam:Activity"/>
    }
}
  </xsl:template>

<xsl:template match="bam:Activity">
  <xsl:variable name="Name" select="@Name"/>
  <xsl:variable name="CompressedDisplayName" select="translate(@Name, ' ', '')"/>
        #region Helper class for the <xsl:value-of select="@Name"/> BAM activity
        [Serializable]
        public partial class <xsl:value-of select="$CompressedDisplayName"/>
        {
            public const string ActivityName = "<xsl:value-of select="@Name"/>";
            
            protected string _activityId = null;
            protected Dictionary&lt;string,object&gt; _activityItems = new Dictionary&lt;string,object&gt;();
            <xsl:if test="$EventStreamType != 'Orchestration'">
            protected EventStream _eventStream = null;</xsl:if>
            <xsl:if test="$EventStreamType = 'Direct'">
            protected string _connectionString = "Integrated Security=SSPI;Data Source=.;Initial Catalog=BAMPrimaryImport";</xsl:if>
            <xsl:if test="$EventStreamType = 'Buffered'">
            protected string _connectionString = "Integrated Security=SSPI;Data Source=.;Initial Catalog=BizTalkMsgBoxDb";</xsl:if>

            <xsl:if test="$EventStreamType != 'Orchestration'">
            public virtual string ConnectionString
            {
                get { return _connectionString; }
            }</xsl:if>

            public virtual string ActivityID
            {
                get { return _activityId; }
            }
  
            <xsl:apply-templates select="bam:Checkpoint" />

            <xsl:if test="$EventStreamType != 'Orchestration'">
            public <xsl:value-of select="$CompressedDisplayName"/>() : this(Guid.NewGuid().ToString(), null)
            {
            }

            public <xsl:value-of select="$CompressedDisplayName"/>(string activityId) : this(activityId, null)
            {
            }
            
            public <xsl:value-of select="$CompressedDisplayName"/>(string activityId, string connectionString)
            {
                if (string.IsNullOrEmpty(activityId))
                {
                    throw new ArgumentException("activityId is required.", "activityId");
                }
                
                _activityId = activityId;
                
                if (!string.IsNullOrEmpty(connectionString))
                {
                    _connectionString = connectionString;
                }
                
                _eventStream = new <xsl:value-of select="$EventStreamType"/>EventStream(_connectionString, 1);
            }
            </xsl:if>
            <xsl:if test="$EventStreamType = 'Orchestration'">
            public <xsl:value-of select="$CompressedDisplayName"/>() : this(Guid.NewGuid().ToString())
            {
            }

            public <xsl:value-of select="$CompressedDisplayName"/>(string activityId)
            {
                if (string.IsNullOrEmpty(activityId))
                {
                    throw new ArgumentException("activityId is required.", "activityId");
                }
                
                _activityId = activityId;
            }
            </xsl:if>

            /// &lt;summary&gt;
            /// Begins the BAM activity.
            /// &lt;/summary&gt;
            public virtual void Begin<xsl:value-of select="$CompressedDisplayName"/>Activity()
            {
                // Begin the Activity using the passed identifier
                <xsl:if test="$EventStreamType != 'Orchestration'">EventStream es = _eventStream;
                es.BeginActivity(ActivityName, _activityId);</xsl:if>
                <xsl:if test="$EventStreamType = 'Orchestration'">OrchestrationEventStream.BeginActivity(ActivityName, _activityId);</xsl:if>
            }

            /// &lt;summary&gt;
            /// Write any data changes to the BAM activity. This must be called after any property changes.
            /// &lt;/summary&gt;
            public virtual void Commit<xsl:value-of select="$CompressedDisplayName"/>Activity()
            {
                // We need to provide the key/value pairs to the BAM API
                List&lt;object&gt; al = new List&lt;object&gt;();
                foreach (KeyValuePair&lt;string,object&gt; kvp in _activityItems)
                {
                    al.Add(kvp.Key);
                    al.Add(kvp.Value);
                }
                
                // Update the BAM Activity with all of the data
                <xsl:if test="$EventStreamType != 'Orchestration'">EventStream es = _eventStream;
                es.UpdateActivity(ActivityName, _activityId, al.ToArray());
                es.Flush();</xsl:if>
                <xsl:if test="$EventStreamType = 'Orchestration'">OrchestrationEventStream.UpdateActivity(ActivityName, _activityId, al.ToArray());</xsl:if>
            }

            /// &lt;summary&gt;
            /// End the BAM activity. No more changes will be permitted to this activity except by continuation.
            /// &lt;/summary&gt;
            public virtual void End<xsl:value-of select="$CompressedDisplayName"/>Activity()
            {
                // End this activity, no more data can be added.
                <xsl:if test="$EventStreamType != 'Orchestration'">EventStream es = _eventStream;
                es.EndActivity(ActivityName, _activityId);</xsl:if>
                <xsl:if test="$EventStreamType = 'Orchestration'">OrchestrationEventStream.EndActivity(ActivityName, _activityId);</xsl:if>
            }

            /// &lt;summary&gt;
            /// Add a reference from this activity to another activity.
            /// &lt;/summary&gt;
            /// &lt;param name="otherActivityName"&gt;The related activity name. Reference names are limited to 128 characters.&lt;/param&gt;
            /// &lt;param name="otherActivityID"&gt;The related activity ID. Limited to 1024 characters of data.&lt;/param&gt;
            public virtual void AddReferenceToAnotherActivity(string otherActivityName, string otherActivityID)
            {
                AddCustomReference("Activity", otherActivityName, otherActivityID);
            }

            /// &lt;summary&gt;
            /// Add a custom reference to this activity, this enables 'data' to be attached to an activity, such as a message body.
            /// &lt;/summary&gt;
            /// &lt;param name="referenceType"&gt;The related item type. Reference type identifiers are limited to 128 characters.&lt;/param&gt;
            /// &lt;param name="referenceName"&gt;The related item name. Reference names are limited to 128 characters.&lt;/param&gt;
            /// &lt;param name="referenceData"&gt;The related item data. Limited to 1024 characters of data.&lt;/param&gt;
            /// &lt;remarks&gt;See http://msdn.microsoft.com/en-us/library/aa956648(BTS.10).aspx&lt;/remarks&gt;
            public virtual void AddCustomReference(string referenceType, string referenceName, string referenceData)
            {
                // Add a reference to another activity
                <xsl:if test="$EventStreamType != 'Orchestration'">EventStream es = _eventStream;
                es.AddReference(ActivityName, _activityId, referenceType, referenceName, referenceData);</xsl:if>
                <xsl:if test="$EventStreamType = 'Orchestration'">OrchestrationEventStream.AddReference(ActivityName, _activityId, referenceType, referenceName, referenceData);</xsl:if>
            }

            /// &lt;summary&gt;
            /// Add a custom reference to this activity, this enables 'data' to be attached to an activity, such as a message body.
            /// &lt;/summary&gt;
            /// &lt;param name="referenceType"&gt;The related item type. Reference type identifiers are limited to 128 characters.&lt;/param&gt;
            /// &lt;param name="referenceName"&gt;The related item name. Reference names are limited to 128 characters.&lt;/param&gt;
            /// &lt;param name="referenceData"&gt;The related item data. Limited to 1024 characters of data.&lt;/param&gt;
            /// &lt;param name="longReferenceData"&gt;The related item data containing up to 512 KB of Unicode characters of data.&lt;/param&gt;
            /// &lt;remarks&gt;See http://msdn.microsoft.com/en-us/library/aa956648(BTS.10).aspx&lt;/remarks&gt;
            public virtual void AddCustomReference(string referenceType, string referenceName, string referenceData, string longReferenceData)
            {
                // Add a reference to another activity
                <xsl:if test="$EventStreamType != 'Orchestration'">EventStream es = _eventStream;
                es.AddReference(ActivityName, _activityId, referenceType, referenceName, referenceData, longReferenceData);</xsl:if>
                <xsl:if test="$EventStreamType = 'Orchestration'">OrchestrationEventStream.AddReference(ActivityName, _activityId, referenceType, referenceName, referenceData, longReferenceData);</xsl:if>
            }

            /// &lt;summary&gt;
            /// Activate continuation for this activity. While in the context that is enabling continuation, this activity can
            /// still be updated and MUST be ended with a call to End<xsl:value-of select="$CompressedDisplayName"/>Activity().
            /// &lt;/summary&gt;
            public virtual string EnableContinuation()
            {
                string continuationId = "CONT_" + _activityId;
                <xsl:if test="$EventStreamType != 'Orchestration'">EventStream es = _eventStream;
                es.EnableContinuation(ActivityName, _activityId, continuationId);</xsl:if>
                <xsl:if test="$EventStreamType = 'Orchestration'">OrchestrationEventStream.EnableContinuation(ActivityName, _activityId, continuationId);</xsl:if>
                return continuationId;
            }

            <xsl:if test="$EventStreamType != 'Orchestration'">/// &lt;summary&gt;
            /// Flush any buffered events.
            /// &lt;/summary&gt;
            public virtual void Flush()
            {
                EventStream es = _eventStream;
                es.Flush();
            }</xsl:if>
        }
        #endregion
  </xsl:template>

  <xsl:template match="bam:Checkpoint">
    <xsl:variable name="Name" select="@Name"/>
    <xsl:variable name="CompressedDisplayName" select="translate(@Name, ' ', '')"/>
    <xsl:variable name="DataType" select="script:ResolveCLRType(@DataType)"/>
            public virtual <xsl:value-of select="$DataType"/><xsl:text xml:space="preserve"> </xsl:text><xsl:value-of select="$CompressedDisplayName"/>
            {
                get { return (<xsl:value-of select="$DataType"/>)_activityItems[<xsl:value-of select="$CompressedDisplayName"/>BAMFieldName]; }
                set { _activityItems[<xsl:value-of select="$CompressedDisplayName"/>BAMFieldName] = value; }
            }

            public const string <xsl:value-of select="$CompressedDisplayName"/>BAMFieldName = "<xsl:value-of select="@Name"/>";
  </xsl:template>
</xsl:stylesheet>
